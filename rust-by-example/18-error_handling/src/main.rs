// エラーハンドリング

// エラーハンドリングとは失敗の起きる可能性を扱うプロセスのことです。
// 例えば、ファイルを読み込むのに失敗した際、
// その 誤った インプットを使い続けるのは明らかに問題です。
// そのようなエラーを通知して明示的に扱うことで、
// 残りのプログラムに問題が波及することを防ぐことができるようになります。

// Rustnihaエラーに対する明らかな解決方法があり、それらはサブチャプターで記述される。
// これらはすべて微小な違いと様々なユースケースがあります

// 経験則として

// panicは主にテストや回復不能なエラーしょりに役立つ
// プロトタイピングにはまだ実装されていない関数を処理する場合などに役立ちますが
// 説明 unimplemented が多いほどよい
// テストでpanicは明示的に失敗する合理的な方法

// Optionタイプは値がオプションである場合、または欠如がエラー状態でない場合のためのもの
// 例えばディレクトリの親/やc:がない時、
// Optionsを扱う場合、プロトタイピングや値が確実に確実である場合はunwrapで問題ありませんが、
// 何かがうまくいかない場合にエラーメッセージを指定できるので、expectの方が便利です。

// 問題が発生する可能性があり、発信者が問題に対処する必要がある場合は　Resultを利用する
// あなたはそれをうまくいくと期待してunwrap()することもできる。(テスト、もしくはクイックプロトタイプでない限り実行しないこと)

fn main() {
    println!("Hello, world!");
}
