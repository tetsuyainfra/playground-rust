// ライフタイム
// ライフタイムはコンパイラ(借用チェッカーと呼ばれることもあり）がすべての借用に問題がないことを確認する仕組み

// ライフタイムとスコープは同時に語られるが同じものではない
// 例：&を用いて変数を借用する場合
// 借用のライフタイムは宣言時に決定し、貸し手が破棄されるまで続く
// しかし借用のスコープは参照が”使われる時”に決定する

// 以下の例でライフタイムとスコープの関係を見る

// `i`は最長のライフタイムを持ち、そのスコープは`borrow1`および`borrow2`
// のスコープを完全に包含します。`borrow1`と`borrow2`の存続期間は一切重なりません。
fn main() {
  let i = 3; // Lifetime for `i` starts. ────────────────┐
             //                                          │
  {
    //                                                   │
    let borrow1 = &i; // `borrow1` lifetime starts.   ──┐│
                      //                                ││
    println!("borrow1: {}", borrow1); //                ││
  } // `borrow1 ends. ──────────────────────────────────┘│
    //                                                   │
    //                                                   │
  {
    //                                                   │
    let borrow2 = &i; // `borrow2` lifetime starts.   ──┐│
                      //                                ││
    println!("borrow2: {}", borrow2); //                ││
  } // `borrow2` ends. ─────────────────────────────────┘│
    //                                                   │
} // Lifetime ends. ─────────────────────────────────────┘
